var express = require('express');

//+ add modules for body parse and session store
var bodyParser = require('body-parser');
var cookieParser = require('cookie-parser');
var expressSession = require('express-session');
var mongoStore = require('connect-mongo')({session: expressSession});

//+ connect to MongoDB
var dbConn = require('../app/model/db_connection');
dbConn.getDBConnection(function (currentDB) {
    var app = express();
    app.engine('.html', require('ejs').__express);
    app.set('views', '../app/views');
    app.set('view engine', 'html');

    //+ add session store
    app.use(bodyParser());
    app.use(cookieParser('SECRET'));
    app.use(expressSession({
        secret: 'SECRET',
        cookie: {maxAge: 60000 * 15},
        store: new mongoStore({
            db: currentDB,
            collection: 'sessions'
        })
    }));

    require('../app/routes')(app);

    app.listen(8080);
});


function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
